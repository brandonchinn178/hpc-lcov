version: 2.1

aliases:
  - &param_stack_yaml
    stack_yaml:
      type: string
      default: stack.yaml
  - &param_latest
    latest:
      type: boolean
      default: false

executors:
  centos7:
    parameters:
      <<: [*param_stack_yaml, *param_latest]

    docker:
      - image: centos:7
    working_directory: /root/src
    shell: /bin/bash -eux -o pipefail
    environment:
      STACK_YAML: << parameters.stack_yaml >>
      CI_LATEST: <<# parameters.latest >>1<</ parameters.latest >>
      LANG: en_US.UTF-8
      COVERAGE_DIR: /root/coverage/

orbs:
  codecov: codecov/codecov@1.0.2
  helpers:
    commands:
      init:
        steps:
          - checkout
          - run:
              name: Build cache key
              command: |
                FILES=(
                  "${STACK_YAML}"
                  package.yaml
                )

                echo "${STACK_YAML}" > cache-key.txt
                cat "${FILES[@]}" >> cache-key.txt

      load_stack_project:
        steps:
          - run:
              name: Install stack
              command: |
                curl -sSL https://get.haskellstack.org/ | sh
                stack --version | tee -a cache-key.txt
          - restore_cache:
              key: v0-{{ .Environment.CIRCLE_JOB }}-{{ checksum "cache-key.txt" }}

      build_stack_deps:
        parameters:
          stack_options:
            type: string
            default: ''
        steps:
          - run:
              name: Build external dependencies
              command: stack build --test --only-dependencies << parameters.stack_options >>
          - save_cache:
              key: v0-{{ .Environment.CIRCLE_JOB }}-{{ checksum "cache-key.txt" }}
              paths:
                - ~/.stack
                - .stack-work

      test_minimal_example:
        parameters:
          test_with_hpc_lcov:
            type: string
            default: hpc-lcov
        steps:
          - run:
              name: Prep minimal-example test
              command: cp "${STACK_YAML}" minimal-example/
          - run:
              name: Test minimal-example
              command: |
                stack test --coverage
                hpc-lcov -o actual-lcov.info
                diff -L expected lcov.info -L actual actual-lcov.info --unified
              working_directory: /root/src/minimal-example
          - run:
              name: Test hpc-lcov executable on minimal-example
              command: ../.circleci/test-hpc-lcov.sh "${HPC_LCOV}" "${COVERAGE_DIR}"
              working_directory: /root/src/minimal-example
              environment:
                HPC_LCOV: << parameters.test_with_hpc_lcov >>

jobs:
  run_build_and_test:
    parameters:
      <<: [*param_stack_yaml, *param_latest]

    executor:
      name: centos7
      stack_yaml: << parameters.stack_yaml >>
      latest: << parameters.latest >>

    steps:
      - helpers/init
      - helpers/load_stack_project
      - helpers/build_stack_deps
      - run:
          name: Build and test hpc-lcov
          command: .circleci/stack-build.sh --test --copy-bins
      - helpers/test_minimal_example

  test_latest:
    executor:
      name: centos7
      latest: true

    steps:
      - helpers/init
      - helpers/load_stack_project
      - helpers/build_stack_deps
      - run:
          name: Full build without coverage
          command: .circleci/stack-build.sh --test --no-run-tests --copy-bins
      - run:
          name: Check Cabal file up to date
          command: git diff --exit-code *.cabal

      - run:
          name: Build and test hpc-lcov with coverage
          command: .circleci/stack-build.sh --test --coverage
      - run:
          name: Convert coverage output
          command: hpc-lcov -o lcov-test.info
      - codecov/upload:
          file: lcov-test.info

      - run:
          name: Build and install with coverage
          command: |
            stack clean
            .circleci/stack-build.sh --local-bin-path . --copy-bins --coverage
            mv hpc-lcov /usr/local/bin/hpc-lcov-coverage-enabled
      - helpers/test_minimal_example:
          test_with_hpc_lcov: /usr/local/bin/hpc-lcov-coverage-enabled
      - run:
          name: Convert coverage output
          command: |
            for TIX_FILE in "${COVERAGE_DIR}"/*.tix; do
              LCOV_FILE="${COVERAGE_DIR}/$(basename "${TIX_FILE}" tix).info"
              hpc-lcov -f "${TIX_FILE}" --main-package hpc-lcov -o "${LCOV_FILE}"
            done
      - run:
          name: Install lcov
          command: yum install -y epel-release && yum install -y lcov
      - run:
          name: Combine coverage output
          command: |
            LCOV_ARGS=()
            for LCOV_FILE in "${COVERAGE_DIR}"/*.info; do
              LCOV_ARGS+=(-a "${LCOV_FILE}")
            done
            lcov "${LCOV_ARGS[@]}" > lcov-exe.info
      - codecov/upload:
          file: lcov-exe.info

  run_lint:
    executor: centos7

    steps:
      - helpers/init
      - helpers/load_stack_project
      - run:
          name: Build linters
          command: |
            yum install -y ncurses-devel
            stack build -j1 hlint fourmolu

      - run:
          name: Lint
          command: |
            set +e
            STATUS=0
            hlint . || STATUS=1
            fourmolu -m check $(git ls-files '*.hs') || STATUS=1
            exit "${STATUS}"

  run_haddock:
    executor: centos7

    steps:
      - helpers/init
      - helpers/load_stack_project
      - helpers/build_stack_deps:
          stack_options: --haddock

      - run:
          name: Build haddock
          command: stack build --haddock
      - run:
          name: Collect haddock
          command: |
            mkdir -p .ci/
            tar czf .ci/haddock-docs.tar.gz -C "$(find .stack-work/dist -regex '.*/doc/html/[^/]*')" .
      - store_artifacts:
          path: .ci/

workflows:
  version: 2

  build_and_test:
    jobs:
      - test_latest
      - run_build_and_test:
          name: test_ghc_9.2
          stack_yaml: stack-ghc-9.2.yaml
      - run_build_and_test:
          name: test_ghc_9.0
          stack_yaml: stack-ghc-9.0.yaml
      - run_build_and_test:
          name: test_ghc_8.10
          stack_yaml: stack-ghc-8.10.yaml
      - run_build_and_test:
          name: test_ghc_8.8
          stack_yaml: stack-ghc-8.8.yaml
      - run_build_and_test:
          name: test_ghc_8.6
          stack_yaml: stack-ghc-8.6.yaml
      - run_lint
      - run_haddock
